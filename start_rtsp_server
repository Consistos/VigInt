#!/bin/bash

# RTSP Server Startup Script for Vigint

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
MEDIAMTX_BINARY="mediamtx"
CONFIG_FILE="mediamtx_simple.yml"
PID_FILE="mediamtx.pid"
LOG_FILE="mediamtx.log"

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

find_mediamtx() {
    # Try to find MediaMTX binary
    local possible_paths=(
        "./mediamtx"
        "./bin/mediamtx"
        "/usr/local/bin/mediamtx"
        "/usr/bin/mediamtx"
    )
    
    for path in "${possible_paths[@]}"; do
        if [ -f "$path" ] && [ -x "$path" ]; then
            echo "$path"
            return 0
        fi
    done
    
    # Check if it's in PATH
    if command -v mediamtx &> /dev/null; then
        echo "mediamtx"
        return 0
    fi
    
    return 1
}

check_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        log_error "Configuration file not found: $CONFIG_FILE"
        exit 1
    fi
    log_info "Using configuration file: $CONFIG_FILE"
}

start_server() {
    local mediamtx_path
    if ! mediamtx_path=$(find_mediamtx); then
        log_error "MediaMTX binary not found!"
        log_info "Please download MediaMTX from: https://github.com/bluenviron/mediamtx/releases"
        log_info "Place the binary in the current directory or install it system-wide"
        exit 1
    fi
    
    log_info "Found MediaMTX at: $mediamtx_path"
    
    # Check if already running
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log_warn "RTSP server is already running (PID: $pid)"
            exit 1
        else
            log_warn "Removing stale PID file"
            rm -f "$PID_FILE"
        fi
    fi
    
    log_info "Starting RTSP server..."
    
    # Start MediaMTX in background
    nohup "$mediamtx_path" "$CONFIG_FILE" > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # Save PID
    echo $pid > "$PID_FILE"
    
    # Wait a moment and check if it's still running
    sleep 2
    if kill -0 "$pid" 2>/dev/null; then
        log_info "RTSP server started successfully (PID: $pid)"
        log_info "RTSP URL: rtsp://localhost:8554/"
        log_info "API URL: http://localhost:9997/"
        log_info "Metrics URL: http://localhost:9998/metrics"
        log_info "Log file: $LOG_FILE"
    else
        log_error "RTSP server failed to start"
        if [ -f "$LOG_FILE" ]; then
            log_error "Check log file for details: $LOG_FILE"
            tail -10 "$LOG_FILE"
        fi
        rm -f "$PID_FILE"
        exit 1
    fi
}

stop_server() {
    if [ ! -f "$PID_FILE" ]; then
        log_warn "PID file not found. Server may not be running."
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    
    if ! kill -0 "$pid" 2>/dev/null; then
        log_warn "Server is not running (stale PID file)"
        rm -f "$PID_FILE"
        return 0
    fi
    
    log_info "Stopping RTSP server (PID: $pid)..."
    
    # Try graceful shutdown first
    kill -TERM "$pid"
    
    # Wait for graceful shutdown
    local count=0
    while kill -0 "$pid" 2>/dev/null && [ $count -lt 10 ]; do
        sleep 1
        count=$((count + 1))
    done
    
    # Force kill if still running
    if kill -0 "$pid" 2>/dev/null; then
        log_warn "Forcing server shutdown..."
        kill -KILL "$pid"
        sleep 1
    fi
    
    rm -f "$PID_FILE"
    log_info "RTSP server stopped"
}

restart_server() {
    log_info "Restarting RTSP server..."
    stop_server
    sleep 2
    start_server
}

status_server() {
    if [ ! -f "$PID_FILE" ]; then
        echo "RTSP server is not running"
        return 1
    fi
    
    local pid=$(cat "$PID_FILE")
    
    if kill -0 "$pid" 2>/dev/null; then
        echo "RTSP server is running (PID: $pid)"
        
        # Try to get some basic info
        if command -v curl &> /dev/null; then
            echo "Checking API endpoint..."
            if curl -s http://localhost:9997/v1/config > /dev/null; then
                echo "API is responding"
            else
                echo "API is not responding"
            fi
        fi
        
        return 0
    else
        echo "RTSP server is not running (stale PID file)"
        rm -f "$PID_FILE"
        return 1
    fi
}

show_help() {
    echo "RTSP Server Control Script"
    echo ""
    echo "Usage: $0 {start|stop|restart|status|logs}"
    echo ""
    echo "Commands:"
    echo "  start     Start the RTSP server"
    echo "  stop      Stop the RTSP server"
    echo "  restart   Restart the RTSP server"
    echo "  status    Show server status"
    echo "  logs      Show recent log entries"
    echo ""
}

show_logs() {
    if [ -f "$LOG_FILE" ]; then
        tail -50 "$LOG_FILE"
    else
        log_warn "Log file not found: $LOG_FILE"
    fi
}

# Main script
case "${1:-}" in
    start)
        check_config
        start_server
        ;;
    stop)
        stop_server
        ;;
    restart)
        check_config
        restart_server
        ;;
    status)
        status_server
        ;;
    logs)
        show_logs
        ;;
    *)
        show_help
        exit 1
        ;;
esac